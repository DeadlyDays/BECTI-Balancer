using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

namespace BectiBalancer
{
    class CollectionList
    {
        private List<Item> itemList;//List of Items
        public List<Item> ItemList
        {
            get
            {
                return itemList;
            }
            set
            {
                if (value != null)
                    itemList = value;
                else
                    itemList = new List<Item>();
            }
        }

        private List<Unit> unitList;
        public List<Unit> UnitList
        {
            get
            {
                return unitList;
            }
            set
            {
                if (value != null)
                    unitList = value;
                else
                    unitList = new List<Unit>();
            }
        }

        private List<Ammo> ammoList;
        public List<Ammo> AmmoList
        {
            get
            {
                return ammoList;
            }
            set
            {
                if (value != null)
                    ammoList = value;
                else
                    ammoList = new List<Ammo>();
            }
        }

        private List<Gear> gearList;
        public List<Gear> GearList
        {
            get
            {
                return gearList;
            }
            set
            {
                if (value != null)
                    gearList = value;
                else
                    gearList = new List<Gear>();
            }
        }

        private List<Item> filteredOutItemList;//list of items that have been filtered out, these are to be added back in on clearing filter
        public List<Item> FilteredOutItemList
        {
            get
            {
                return filteredOutItemList;
            }
            set
            {
                if (value != null)
                    filteredOutItemList = value;
                else
                    filteredOutItemList = new List<Item>();
            }
        }

        public Boolean filtered;

        private String type;//is this a Unit, Gear, etc type file
        public String Type
        {
            get
            {
                return type;
            }
            set
            {
                type = value;
            }
        }

        private String header;//Everything before //[CONFIGSTART]
        private String content;
        private String footer;//reference to load using common function, different for each file type

        //Tag List is special List. This is a set of Values autogenerated after checking out internal taglists, or read from file.
        //This gets put into the file near the top and shows us all of the tags included, and their weights(same weight == alphabetical order then)
        private List<String> tagList;
        public List<String> TagList
        {
            get
            {
                return tagList;
            }
            set
            {
                if(value == null)
                {
                    tagList = new List<String>();
                }
                else
                    tagList = value;
            }
        }

        public CollectionList()
        {
            ItemList = null;
            UnitList = null;
            AmmoList = null;
            GearList = null;
            filtered = false;
            FilteredOutItemList = null;
            Type = "";
        }

        public void clearCollection()
        {
            itemList = new List<Item>();
            unitList = new List<Unit>();
            ammoList = new List<Ammo>();
            gearList = new List<Gear>();
            FilteredOutItemList = new List<Item>();
            filtered = false;
            Type = "";
        }
        public List<String> splitStringBy(String str, String delimiter)
            //Takes a String and splits it into a List by delimiter
        {
            if (delimiter != "\n") str = str.Replace("\n", "").Replace("\r", "");
            else str = str.Replace("\r", "");
            return Regex.Split(str, delimiter).ToList(); //str.Split(delimiter).ToList();
        }

        public void addItem(Object item, String type)
        {
            if (type == "BectiBalancer.Unit")
                UnitList.Add((Unit)item);
            else if (type == "BectiBalancer.Ammo")
                AmmoList.Add((Ammo)item);
            else if (type == "BectiBalancer.Gear")
                GearList.Add((Gear)item);
            else
                ItemList.Add((Item)item);
            //new Item
        }
        public List<Field> returnFieldsOfItemNamed(String name)
        {
            for(int i = 0; i < ItemList.Count; i++)
            {
                if(ItemList[i].ClassName == name)
                {
                    return ItemList[i].FieldList;
                }
            }
            return new List<Field>();
        }

        //Tag Data
        //[Tag;tagName:tagValue]
        //[TagHeader;tagName:tagWeight]
        public void readTags()
        {

        }

        public void populateFromCSV(String path, String type)
        {
            String file = System.IO.File.ReadAllText(path, System.Text.Encoding.UTF8);
            //populates String file with entire documents text

            //UNITS
            if (type == "Unit")
                //Populate Units
            {
                Type = "Unit";
                //String _c, _p, _n, _o, _t, _u, _f, _s, _d;
                //values to populate

                //int iPointer = 0;//current index Number
                //String sPointer;//current index Value

                List<String> content = splitStringBy(file, ",");
                if (content.Count <= 0)
                    //If file has no content, Exit
                {
                    return;//Empty File, exit
                }

                for(int i = 0; i < content.Count; i++)
                //iterate through content
                {
                    Unit newItem = new Unit(content[i].Replace(" ", ""));
                    
                    //newItem.addField(new Field("_c", ""));
                    newItem.addField(new Field("_p", "", "", "Picture", "\'"), false);
                    newItem.addField(new Field("_n", "", "", "Name", "\'"), false);
                    newItem.addField(new Field("_o", "", "", "Price"), false);
                    newItem.addField(new Field("_t", "", "", "BuildTime"), false);
                    newItem.addField(new Field("_u", "", "", "UpgradeLevel"), false);
                    newItem.addField(new Field("_f", "", "", "Factory"), false);
                    newItem.addField(new Field("_s", "", "", "Script", "\""), false);
                    newItem.addField(new Field("_d", "", "", "Distance"), false);
                    newItem.addField(new Field("_g", "", "", "Camo", "\""), false);
                    newItem.FieldList[0].DisplayName = "ClassName";
                    newItem.FieldList[0].Tags = "\"";
                    addItem(newItem, type);
                    //Add each line to item

                }
                
            }

            //AMMO
            if (type == "Ammo")
            //Populate Units
            {
                Type = "Ammo";
                //String _i, _o, _u, _p, _t;
                //values to populate

                //int iPointer = 0;//current index Number
                //String sPointer;//current index Value

                List<String> content = splitStringBy(file, ",");
                if (content.Count <= 0)
                //If file has no content, Exit
                {
                    return;//Empty File, exit
                }

                for (int i = 0; i < content.Count; i++)
                //iterate through content
                {
                    Ammo newItem = new Ammo(content[i].Replace(" ", ""));

                    //newItem.addField(new Field("_c", ""));

                    newItem.addField(new Field("_o", "", "", "OrdinanceLevel", "\""), false);
                    newItem.addField(new Field("_u", "", "", "UpgradeLevel"), false);
                    newItem.addField(new Field("_p", "", "", "Price"), false);
                    newItem.addField(new Field("_t", "", "", "RearmTimeRound"), false);
                    newItem.FieldList[0].DisplayName = "ClassName";
                    newItem.FieldList[0].Tags = "\"";
                    addItem(newItem, type);
                    //Add each line to item

                }

            }

            //GEAR
            if (type == "Gear")
            //Populate Units
            {
                Type = "Gear";
                //String _i, _u, _p, _g;
                //values to populate

                //int iPointer = 0;//current index Number
                //String sPointer;//current index Value

                List<String> content = splitStringBy(file, ",");
                if (content.Count <= 0)
                //If file has no content, Exit
                {
                    return;//Empty File, exit
                }

                for (int i = 0; i < content.Count; i++)
                //iterate through content
                {
                    Gear newItem = new Gear(content[i].Replace(" ", ""));

                    //newItem.addField(new Field("_c", ""));
                    
                    newItem.addField(new Field("_u", "", "", "UpgradeLevel"), false);
                    newItem.addField(new Field("_p", "", "", "Price"), false);
                    newItem.addField(new Field("_g", "", "", "Filter"), false);
                    newItem.FieldList[0].DisplayName = "ClassName";
                    newItem.FieldList[0].Tags = "\"";
                    addItem(newItem, type);
                    //Add each line to item

                }

            }
        }

        public void popFromFormatedTextRegex<T> (String file) where T : Item, new()
        {
            //
            //---Wipe Comment Blocks, Comment blocks are just comments we dont give no fuck
            ///
            if (file.Contains("/*") && file.Contains("/*"))
                while (file.Contains("/*") && file.Contains("/*"))
                {
                    int startIndex, iCount;
                    startIndex = file.IndexOf("/*");
                    if (startIndex > 0)
                        if (file[startIndex - 1] == '/')
                        {
                            file = file.Insert(startIndex + 1, "_");
                            continue;
                        }
                    int istart = file.IndexOf("/*");
                    int iend = file.IndexOf("*/") + 2;
                    iCount = (iend - istart);
                    if (iCount > 0 /*&& startIndex > 0*/)
                        file = file.Remove(startIndex, iCount);//Get rid of comment blocks

                }

            //
            //---This block of code customizes what data we are working with base on Type cast to method
            //
            System.Reflection.PropertyInfo[] prop = typeof(T).GetProperties();
            
            String pattern = "";
            T thisClass = new T();//we need to get values of the static array to get the names of the arrays declared in the config
            
            if(prop.Length > 5)
                for(int i = 0; i < prop.Length - 5; i++)
                {
                    pattern += ".*?" + (thisClass.ArrayNames[i]) + " pushBack (?<" + prop[i].Name.ToString() + ">.+?);.*?\n.*?";
                    String test = "";
                }

            //Every item
            MatchCollection matchCol = Regex.Matches(file, pattern, RegexOptions.None, Regex.InfiniteMatchTimeout);
            
            //Populate Items
            if(matchCol.Count > 0)
                foreach (Match p in matchCol)//Iterate through each item p in matchCol
                {
                    thisClass = new T();
                    for (int i = 0; i < thisClass.ArrayNames.Length; i++)//Iterate through each property i in matchCol.Group
                    {
                        thisClass.addField(new Field(thisClass.ArrayNames[i], "", p.Groups[i+1].Value, prop[i].Name.ToString()), false);
                    }
                    addItem(thisClass, typeof(T).ToString());
                }

        }
        public void populateFromFormatedText(String file, String type)
        {
            if (type == "Unit")
                popFromFormatedTextRegex<Unit>(file);
            else if (type == "Gear")
                popFromFormatedTextRegex<Gear>(file);
            else if (type == "Ammo")
                popFromFormatedTextRegex<Ammo>(file);
            
        }
        public void populateFromFormatedFile(String path, String type)
        {
            
            content = System.IO.File.ReadAllText(path, System.Text.Encoding.UTF8);
            //populates String file with entire documents text
            populateFromFormatedText(content, type);
        }

        public String returnFormatedFile(String Type)
        {
            String str = "";
            if(Type == "Unit")
            {
                for (int e = 0; e < UnitList.Count; e++)
                {
                    for(int i = 0; i < UnitList[e].FieldList.Count(); i++)
                    {
                        if(UnitList[e].FieldList[i].Value.IndexOf(UnitList[e].FieldList[i].Tags) != 0 && UnitList[e].FieldList[i].Value.LastIndexOf(UnitList[e].FieldList[i].Tags) != (UnitList[e].FieldList[i].Value.Count() - 1))
                            //if the value doesn't start and end with proper tags, add the tags
                        {
                            str += UnitList[e].FieldList[i].Name + " pushBack " + UnitList[e].FieldList[i].Tags + UnitList[e].FieldList[i].Value + UnitList[e].FieldList[i].Tags + ";\r\n";
                        }
                        else
                        //else, paste value as is
                        {
                            str += UnitList[e].FieldList[i].Name + " pushBack " + UnitList[e].FieldList[i].Value + ";\r\n";
                        }
                        
                    }
                    
                    str += "\r\n\r\n";
                }
                return str;
            }
            else if (Type == "Ammo")
            {
                for (int e = 0; e < AmmoList.Count; e++)
                {
                    for (int i = 0; i < AmmoList[e].FieldList.Count(); i++)
                    {
                        if (AmmoList[e].FieldList[i].Value.IndexOf(AmmoList[e].FieldList[i].Tags) != 0 && AmmoList[e].FieldList[i].Value.LastIndexOf(AmmoList[e].FieldList[i].Tags) != (AmmoList[e].FieldList[i].Value.Count() - 1))
                        //if the value doesn't start and end with proper tags, add the tags
                        {
                            str += AmmoList[e].FieldList[i].Name + " pushBack " + AmmoList[e].FieldList[i].Tags + AmmoList[e].FieldList[i].Value + AmmoList[e].FieldList[i].Tags + ";\r\n";
                        }
                        else
                        //else, paste value as is
                        {
                            str += AmmoList[e].FieldList[i].Name + " pushBack " + AmmoList[e].FieldList[i].Value + ";\r\n";
                        }

                    }

                    str += "\r\n\r\n";
                }
                return str;
            }
            else if (Type == "Gear")
            {
                for (int e = 0; e < GearList.Count; e++)
                {
                    for (int i = 0; i < GearList[e].FieldList.Count(); i++)
                    {
                        if (GearList[e].FieldList[i].Value.IndexOf(GearList[e].FieldList[i].Tags) != 0 && GearList[e].FieldList[i].Value.LastIndexOf(GearList[e].FieldList[i].Tags) != (GearList[e].FieldList[i].Value.Count() - 1))
                        //if the value doesn't start and end with proper tags, add the tags
                        {
                            str += GearList[e].FieldList[i].Name + " pushBack " + GearList[e].FieldList[i].Tags + GearList[e].FieldList[i].Value + GearList[e].FieldList[i].Tags + ";\r\n";
                        }
                        else
                        //else, paste value as is
                        {
                            str += GearList[e].FieldList[i].Name + " pushBack " + GearList[e].FieldList[i].Value + ";\r\n";
                        }

                    }

                    str += "\r\n\r\n";
                }
                return str;
            }
            return "";
        }

        
        public void filterList(String type, String keyword)
        //edits the list, takes and stores things that dont have keyword into filteredOutItemList and leaves the rest
        {
            unfilterList(type);//unfilter before filtering so we are always checking against the whole

            if (type == "Gear")
            {
                for(int i = 0; i < GearList.Count; i++)
                {
                    if(GearList[i].ClassName.Contains(keyword) || GearList[i].Price.Contains(keyword) || GearList[i].UpgradeLevel.Contains(keyword) || GearList[i].Filter.Contains(keyword))
                    {
                        //Contains keyword
                    }
                    else
                    {
                        //Does not contain keyword
                        filteredOutItemList.Add(GearList[i]);
                        GearList.Remove(GearList[i]);
                        i--;
                    }
                }
            }
            else if(type == "Unit")
            {
                for (int i = 0; i < UnitList.Count; i++)
                {
                    if (UnitList[i].ClassName.Contains(keyword) || UnitList[i].Picture.Contains(keyword) || UnitList[i].Name.Contains(keyword) || UnitList[i].Price.Contains(keyword)
                        || UnitList[i].BuildTime.Contains(keyword) || UnitList[i].UpgradeLevel.Contains(keyword) || UnitList[i].Factory.Contains(keyword) || UnitList[i].Script.Contains(keyword)
                        || UnitList[i].Distance.Contains(keyword) || UnitList[i].Camo.Contains(keyword))
                    {
                        //Contains keyword
                    }
                    else
                    {
                        //Does not contain keyword
                        filteredOutItemList.Add(UnitList[i]);
                        UnitList.Remove(UnitList[i]);
                        i--;
                    }
                }
            }
            else if(type == "Ammo")
            {
                for (int i = 0; i < AmmoList.Count; i++)
                {
                    if (AmmoList[i].ClassName.Contains(keyword) || AmmoList[i].Price.Contains(keyword) || AmmoList[i].UpgradeLevel.Contains(keyword) || AmmoList[i].RearmTimeRound.Contains(keyword)
                        || AmmoList[i].OrdinanceLevel.Contains(keyword))
                    {
                        //Contains keyword
                    }
                    else
                    {
                        //Does not contain keyword
                        filteredOutItemList.Add(AmmoList[i]);
                        AmmoList.Remove(AmmoList[i]);
                        i--;
                    }
                }
            }

            filtered = true;
        }
        public void unfilterList(String type)
        //reconstitutes items in filteredOutItemList back into List
        {
            if (FilteredOutItemList.Count > 0)
            {
                if (type == "Gear")
                {
                    /*for (int i = 0; i < FilteredOutItemList.Count; i++)
                    {
                        GearList.Add((Gear)FilteredOutItemList[i]);
                        FilteredOutItemList.Remove(FilteredOutItemList[i]);
                    }*/
                    while(FilteredOutItemList.Count > 0)
                    {
                        GearList.Add((Gear)FilteredOutItemList[0]);
                        FilteredOutItemList.Remove(FilteredOutItemList[0]);
                    }
                }
                else if (type == "Unit")
                {
                    /*for (int i = 0; i < FilteredOutItemList.Count; i++)
                    {
                        UnitList.Add((Unit)FilteredOutItemList[i]);
                        FilteredOutItemList.Remove(FilteredOutItemList[i]);
                    }*/
                    while (FilteredOutItemList.Count > 0)
                    {
                        UnitList.Add((Unit)FilteredOutItemList[0]);
                        FilteredOutItemList.Remove(FilteredOutItemList[0]);
                    }
                }
                else if (type == "Ammo")
                {
                    /*for (int i = 0; i < FilteredOutItemList.Count; i++)
                    {
                        AmmoList.Add((Ammo)FilteredOutItemList[i]);
                        FilteredOutItemList.Remove(FilteredOutItemList[i]);
                    }*/
                    while (FilteredOutItemList.Count > 0)
                    {
                        AmmoList.Add((Ammo)FilteredOutItemList[0]);
                        FilteredOutItemList.Remove(FilteredOutItemList[0]);
                    }
                }
            }

            filtered = false;
        }

        //end
    }
}
